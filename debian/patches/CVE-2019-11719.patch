Backport of:

# HG changeset patch
# User Kevin Jacobs <kjacobs@mozilla.com>
# Date 1560499074 0
# Node ID 6cfb54d262d030783137aa6478b45ecb3cbfc624
# Parent  313dfef345bd93bc67982249bffa2cfdd5a9d1b5
Bug 1540541 - Don't unnecessarily strip leading 0's from key material during PKCS11 import. r=jcj,mt

Differential Revision: https://phabricator.services.mozilla.com/D31671

Index: nss-3.28.4/nss/lib/freebl/ecl/ecp_25519.c
===================================================================
--- nss-3.28.4.orig/nss/lib/freebl/ecl/ecp_25519.c	2019-07-12 08:17:23.044992067 -0400
+++ nss-3.28.4/nss/lib/freebl/ecl/ecp_25519.c	2019-07-12 08:17:23.040992043 -0400
@@ -115,6 +115,9 @@ ec_Curve25519_pt_mul(SECItem *X, SECItem
         }
         px = P->data;
     }
+    if (k->len != 32) {
+        return SECFailure;
+    }
 
     return ec_Curve25519_mul(X->data, k->data, px);
 }
Index: nss-3.28.4/nss/lib/pk11wrap/pk11akey.c
===================================================================
--- nss-3.28.4.orig/nss/lib/pk11wrap/pk11akey.c	2019-07-12 08:17:23.044992067 -0400
+++ nss-3.28.4/nss/lib/pk11wrap/pk11akey.c	2019-07-12 08:17:23.040992043 -0400
@@ -190,7 +190,6 @@ PK11_ImportPublicKey(PK11SlotInfo *slot,
                 attrs++;
                 PK11_SETATTRS(attrs, CKA_DERIVE, &cktrue, sizeof(CK_BBOOL));
                 attrs++;
-                signedattr = attrs;
                 PK11_SETATTRS(attrs, CKA_EC_PARAMS,
                               pubKey->u.ec.DEREncodedParams.data,
                               pubKey->u.ec.DEREncodedParams.len);
@@ -222,12 +221,14 @@ PK11_ImportPublicKey(PK11SlotInfo *slot,
                 PORT_SetError(SEC_ERROR_BAD_KEY);
                 return CK_INVALID_HANDLE;
         }
-
         templateCount = attrs - theTemplate;
-        signedcount = attrs - signedattr;
         PORT_Assert(templateCount <= (sizeof(theTemplate) / sizeof(CK_ATTRIBUTE)));
-        for (attrs = signedattr; signedcount; attrs++, signedcount--) {
-            pk11_SignedToUnsigned(attrs);
+        if (pubKey->keyType != ecKey) {
+            PORT_Assert(signedattr);
+            signedcount = attrs - signedattr;
+            for (attrs = signedattr; signedcount; attrs++, signedcount--) {
+                pk11_SignedToUnsigned(attrs);
+            }
         }
         rv = PK11_CreateNewObject(slot, CK_INVALID_SESSION, theTemplate,
                                   templateCount, isToken, &objectID);
@@ -1070,9 +1071,13 @@ pk11_loadPrivKeyWithFlags(PK11SlotInfo *
                                         &cktrue, &ckfalse);
 
     /* Not everyone can handle zero padded key values, give
-      * them the raw data as unsigned */
-    for (ap = attrs; extra_count; ap++, extra_count--) {
-        pk11_SignedToUnsigned(ap);
+     * them the raw data as unsigned. The exception is EC,
+     * where the values are encoded or zero-preserving
+     * per-RFC5915 */
+    if (privKey->keyType != ecKey) {
+        for (ap = attrs; extra_count; ap++, extra_count--) {
+            pk11_SignedToUnsigned(ap);
+        }
     }
 
     /* now Store the puppies */
Index: nss-3.28.4/nss/lib/pk11wrap/pk11cert.c
===================================================================
--- nss-3.28.4.orig/nss/lib/pk11wrap/pk11cert.c	2019-07-12 08:17:23.044992067 -0400
+++ nss-3.28.4/nss/lib/pk11wrap/pk11cert.c	2019-07-12 08:17:23.040992043 -0400
@@ -182,7 +182,9 @@ PK11_IsUserCert(PK11SlotInfo *slot, CERT
             SECKEY_DestroyPublicKey(pubKey);
             return PR_FALSE;
         }
-        pk11_SignedToUnsigned(&theTemplate);
+        if (pubKey->keyType != ecKey) {
+            pk11_SignedToUnsigned(&theTemplate);
+        }
         if (pk11_FindObjectByTemplate(slot, &theTemplate, 1) != CK_INVALID_HANDLE) {
             SECKEY_DestroyPublicKey(pubKey);
             return PR_TRUE;
Index: nss-3.28.4/nss/lib/pk11wrap/pk11pk12.c
===================================================================
--- nss-3.28.4.orig/nss/lib/pk11wrap/pk11pk12.c	2019-07-12 08:17:23.044992067 -0400
+++ nss-3.28.4/nss/lib/pk11wrap/pk11pk12.c	2019-07-12 08:19:24.969688658 -0400
@@ -439,11 +439,12 @@ PK11_ImportAndReturnPrivateKey(PK11SlotI
     }
     templateCount = attrs - theTemplate;
     PORT_Assert(templateCount <= sizeof(theTemplate) / sizeof(CK_ATTRIBUTE));
-    PORT_Assert(signedattr != NULL);
-    signedcount = attrs - signedattr;
-
-    for (ap = signedattr; signedcount; ap++, signedcount--) {
-        pk11_SignedToUnsigned(ap);
+    if (lpk->keyType != ecKey) {
+        PORT_Assert(signedattr);
+        signedcount = attrs - signedattr;
+        for (ap = signedattr; signedcount; ap++, signedcount--) {
+            pk11_SignedToUnsigned(ap);
+        }
     }
 
     rv = PK11_CreateNewObject(slot, CK_INVALID_SESSION,
Index: nss-3.28.4/nss/lib/softoken/legacydb/lgattr.c
===================================================================
--- nss-3.28.4.orig/nss/lib/softoken/legacydb/lgattr.c	2019-07-12 08:17:23.044992067 -0400
+++ nss-3.28.4/nss/lib/softoken/legacydb/lgattr.c	2019-07-12 08:17:23.040992043 -0400
@@ -957,9 +957,9 @@ lg_FindECPrivateKeyAttribute(NSSLOWKEYPr
         case CKA_UNWRAP:
             return LG_CLONE_ATTR(attribute, type, lg_StaticFalseAttr);
         case CKA_VALUE:
-            return lg_CopyPrivAttrSigned(attribute, type,
-                                         key->u.ec.privateValue.data,
-                                         key->u.ec.privateValue.len, sdbpw);
+            return lg_CopyPrivAttribute(attribute, type,
+                                        key->u.ec.privateValue.data,
+                                        key->u.ec.privateValue.len, sdbpw);
         case CKA_EC_PARAMS:
             return lg_CopyAttributeSigned(attribute, type,
                                           key->u.ec.ecParams.DEREncoding.data,
Index: nss-3.28.4/nss/lib/softoken/pkcs11c.c
===================================================================
--- nss-3.28.4.orig/nss/lib/softoken/pkcs11c.c	2019-07-12 08:17:23.044992067 -0400
+++ nss-3.28.4/nss/lib/softoken/pkcs11c.c	2019-07-12 08:17:23.044992067 -0400
@@ -7259,7 +7259,7 @@ NSC_DeriveKey(CK_SESSION_HANDLE hSession
 
             rv = ECDH_Derive(&ecPoint, &privKey->u.ec.ecParams, &ecScalar,
                              withCofactor, &tmp);
-            PORT_Free(ecScalar.data);
+            PORT_ZFree(ecScalar.data, ecScalar.len);
             ecScalar.data = NULL;
             if (privKey != sourceKey->objectInfo) {
                 nsslowkey_DestroyPrivateKey(privKey);
